import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import PageHeader from '../../../../components/ui/PageHeader';
import { ChefHatIcon, PlusIcon } from '../../../../components/icons';
import Button from '../../../../components/ui/Button';

describe('PageHeader Component', () => {
  describe('Renderiza√ß√£o b√°sica', () => {
    it('deve renderizar com t√≠tulo obrigat√≥rio', () => {
      render(<PageHeader title="T√≠tulo da P√°gina" />);
      
      expect(screen.getByRole('heading', { level: 1 })).toBeInTheDocument();
      expect(screen.getByText('T√≠tulo da P√°gina')).toBeInTheDocument();
    });

    it('deve aplicar classes base corretas', () => {
      render(<PageHeader title="T√≠tulo" />);
      
      // O container principal √© o div mais externo
      const container = document.querySelector('.bg-white.rounded-xl.shadow-sm');
      expect(container).toBeInTheDocument();
      expect(container).toHaveClass(
        'bg-white',
        'rounded-xl',
        'shadow-sm',
        'border',
        'border-gray-100',
        'p-6',
        'mb-6'
      );
    });
  });

  describe('T√≠tulo', () => {
    it('deve renderizar t√≠tulo com classes corretas', () => {
      render(<PageHeader title="Meu T√≠tulo" />);
      
      const title = screen.getByRole('heading', { level: 1 });
      expect(title).toHaveTextContent('Meu T√≠tulo');
      expect(title).toHaveClass(
        'text-2xl',
        'font-bold',
        'text-gray-900',
        'tracking-tight'
      );
    });

    it('deve renderizar t√≠tulos longos corretamente', () => {
      const longTitle = 'Este √© um t√≠tulo muito longo para testar como o componente se comporta com textos extensos';
      render(<PageHeader title={longTitle} />);
      
      expect(screen.getByText(longTitle)).toBeInTheDocument();
    });

    it('deve renderizar t√≠tulos com caracteres especiais', () => {
      const specialTitle = 'T√≠tulo com √±√°√©√≠√≥√∫ & s√≠mbolos 123!';
      render(<PageHeader title={specialTitle} />);
      
      expect(screen.getByText(specialTitle)).toBeInTheDocument();
    });
  });

  describe('Subt√≠tulo', () => {
    it('deve renderizar subt√≠tulo quando fornecido', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          subtitle="Este √© o subt√≠tulo da p√°gina" 
        />
      );
      
      const subtitle = screen.getByText('Este √© o subt√≠tulo da p√°gina');
      expect(subtitle).toBeInTheDocument();
      expect(subtitle).toHaveClass('text-gray-600', 'mt-1', 'text-sm');
    });

    it('n√£o deve renderizar subt√≠tulo quando n√£o fornecido', () => {
      render(<PageHeader title="T√≠tulo" />);
      
      const subtitle = document.querySelector('.text-gray-600.mt-1.text-sm');
      expect(subtitle).not.toBeInTheDocument();
    });

    it('deve renderizar subt√≠tulo vazio', () => {
      render(<PageHeader title="T√≠tulo" subtitle="" />);
      
      // Quando subtitle √© string vazia, o elemento <p> n√£o √© renderizado
      const subtitleElement = document.querySelector('p.text-gray-600');
      expect(subtitleElement).not.toBeInTheDocument();
    });
  });

  describe('√çcone', () => {
    it('deve renderizar √≠cone quando fornecido', () => {
      const TestIcon = () => <span data-testid="test-icon">üè†</span>;
      render(<PageHeader title="T√≠tulo" icon={<TestIcon />} />);

      // O √≠cone √© renderizado dentro de uma div com classes espec√≠ficas
      expect(screen.getByTestId('test-icon')).toBeInTheDocument();
      
      // Verifica se o container do √≠cone existe
      const iconContainer = screen.getByTestId('test-icon').closest('div');
      expect(iconContainer).toHaveClass('w-12', 'h-12');
    });

    it('deve aplicar classes corretas no container do √≠cone', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          icon={<ChefHatIcon data-testid="page-icon" />} 
        />
      );
      
      const iconContainer = screen.getByTestId('page-icon').parentElement;
      expect(iconContainer).toHaveClass(
        'w-12',
        'h-12',
        'bg-gradient-to-br',
        'from-blue-500',
        'to-blue-600',
        'rounded-xl',
        'flex',
        'items-center',
        'justify-center',
        'text-white',
        'text-2xl',
        'shadow-lg'
      );
    });

    it('n√£o deve renderizar √≠cone quando n√£o fornecido', () => {
      render(<PageHeader title="T√≠tulo" />);

      // Verifica se n√£o h√° container de √≠cone
      const iconContainer = document.querySelector('.w-12.h-12');
      expect(iconContainer).not.toBeInTheDocument();
    });

    it('deve posicionar √≠cone antes do t√≠tulo', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          icon={<ChefHatIcon data-testid="page-icon" />} 
        />
      );
      
      const contentContainer = screen.getByTestId('page-icon').closest('.flex.items-center.gap-4');
      const iconContainer = screen.getByTestId('page-icon').parentElement;
      const titleContainer = screen.getByRole('heading').parentElement;
      
      expect(contentContainer?.firstChild).toBe(iconContainer?.parentElement);
      expect(contentContainer?.lastChild).toBe(titleContainer);
    });
  });

  describe('Actions', () => {
    it('deve renderizar actions quando fornecidas', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          actions={
            <Button data-testid="action-button">
              <PlusIcon /> Adicionar
            </Button>
          }
        />
      );
      
      const actionButton = screen.getByTestId('action-button');
      expect(actionButton).toBeInTheDocument();
      expect(screen.getByText('Adicionar')).toBeInTheDocument();
    });

    it('deve aplicar classes corretas no container de actions', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          actions={
            <Button data-testid="action-button">A√ß√£o</Button>
          }
        />
      );
      
      const actionsContainer = screen.getByTestId('action-button').parentElement;
      expect(actionsContainer).toHaveClass('flex-shrink-0');
    });

    it('n√£o deve renderizar container de actions quando actions n√£o s√£o fornecidas', () => {
      render(<PageHeader title="T√≠tulo" />);
      
      const actionsContainer = document.querySelector('.flex-shrink-0');
      expect(actionsContainer).not.toBeInTheDocument();
    });

    it('deve renderizar m√∫ltiplas actions', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          actions={
            <div className="flex gap-2">
              <Button data-testid="action-1">A√ß√£o 1</Button>
              <Button data-testid="action-2">A√ß√£o 2</Button>
            </div>
          }
        />
      );
      
      expect(screen.getByTestId('action-1')).toBeInTheDocument();
      expect(screen.getByTestId('action-2')).toBeInTheDocument();
    });
  });

  describe('Layout e responsividade', () => {
    it('deve aplicar classes de layout responsivo', () => {
      render(<PageHeader title="T√≠tulo" />);
      
      const layoutContainer = screen.getByRole('heading').closest('.flex.flex-col.sm\\:flex-row');
      expect(layoutContainer).toHaveClass(
        'flex',
        'flex-col',
        'sm:flex-row',
        'sm:items-center',
        'sm:justify-between',
        'gap-4'
      );
    });

    it('deve aplicar classes corretas no container de conte√∫do', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          icon={<ChefHatIcon data-testid="icon" />}
        />
      );
      
      const contentContainer = screen.getByTestId('icon').closest('.flex.items-center.gap-4');
      expect(contentContainer).toHaveClass('flex', 'items-center', 'gap-4');
    });

    it('deve aplicar flex-shrink-0 no container do √≠cone', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          icon={<ChefHatIcon data-testid="icon" />}
        />
      );
      
      const iconWrapper = screen.getByTestId('icon').closest('.flex-shrink-0');
      expect(iconWrapper).toHaveClass('flex-shrink-0');
    });
  });

  describe('ClassName customizada', () => {
    it('deve aplicar className customizada', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          className="custom-header-class" 
        />
      );
      
      const header = document.querySelector('.custom-header-class');
      expect(header).toBeInTheDocument();
      expect(header).toHaveClass('custom-header-class');
    });

    it('deve combinar className customizada com classes base', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          className="custom-class" 
        />
      );
      
      const header = document.querySelector('.custom-class');
      expect(header).toBeInTheDocument();
      expect(header).toHaveClass(
        'custom-class',
        'bg-white',
        'rounded-xl',
        'shadow-sm',
        'border',
        'border-gray-100',
        'p-6',
        'mb-6'
      );
    });
  });

  describe('Composi√ß√£o completa', () => {
    it('deve renderizar todos os elementos quando fornecidos', () => {
      render(
        <PageHeader 
          title="P√°gina Completa"
          subtitle="Subt√≠tulo da p√°gina"
          icon={<ChefHatIcon data-testid="complete-icon" />}
          actions={
            <Button data-testid="complete-action">
              <PlusIcon /> Nova Receita
            </Button>
          }
          className="complete-header"
        />
      );
      
      // Verificar todos os elementos
      expect(screen.getByText('P√°gina Completa')).toBeInTheDocument();
      expect(screen.getByText('Subt√≠tulo da p√°gina')).toBeInTheDocument();
      expect(screen.getByTestId('complete-icon')).toBeInTheDocument();
      expect(screen.getByTestId('complete-action')).toBeInTheDocument();
      expect(screen.getByText('Nova Receita')).toBeInTheDocument();
      
      // Verificar classe customizada
      const header = document.querySelector('.complete-header');
      expect(header).toBeInTheDocument();
      expect(header).toHaveClass('complete-header');
    });

    it('deve manter hierarquia correta dos elementos', () => {
      render(
        <PageHeader 
          title="T√≠tulo"
          subtitle="Subt√≠tulo"
          icon={<span data-testid="hierarchy-icon">üè†</span>}
          actions={<Button data-testid="hierarchy-action">A√ß√£o</Button>}
        />
      );
      
      // Verifica se todos os elementos est√£o presentes
      expect(screen.getByRole('heading')).toBeInTheDocument();
      expect(screen.getByText('Subt√≠tulo')).toBeInTheDocument();
      expect(screen.getByTestId('hierarchy-icon')).toBeInTheDocument();
      expect(screen.getByTestId('hierarchy-action')).toBeInTheDocument();
      
      // Verifica se o √≠cone est√° dentro de um container com flex-shrink-0
      const iconContainer = screen.getByTestId('hierarchy-icon').closest('.flex-shrink-0');
      expect(iconContainer).toBeInTheDocument();
      
      // Verifica se a a√ß√£o est√° dentro de um container com flex-shrink-0
      const actionContainer = screen.getByTestId('hierarchy-action').closest('.flex-shrink-0');
      expect(actionContainer).toBeInTheDocument();
    });
  });

  describe('Casos extremos', () => {
    it('deve funcionar com t√≠tulo muito longo', () => {
      const veryLongTitle = 'A'.repeat(200);
      render(<PageHeader title={veryLongTitle} />);
      
      expect(screen.getByText(veryLongTitle)).toBeInTheDocument();
    });

    it('deve funcionar com subt√≠tulo muito longo', () => {
      const veryLongSubtitle = 'B'.repeat(300);
      render(
        <PageHeader 
          title="T√≠tulo" 
          subtitle={veryLongSubtitle} 
        />
      );
      
      expect(screen.getByText(veryLongSubtitle)).toBeInTheDocument();
    });

    it('deve funcionar com actions complexas', () => {
      render(
        <PageHeader 
          title="T√≠tulo" 
          actions={
            <div className="flex flex-col sm:flex-row gap-2">
              <Button size="sm" variant="outline">Filtrar</Button>
              <Button size="sm" variant="secondary">Exportar</Button>
              <Button size="sm" variant="primary">Adicionar</Button>
            </div>
          }
        />
      );
      
      expect(screen.getByText('Filtrar')).toBeInTheDocument();
      expect(screen.getByText('Exportar')).toBeInTheDocument();
      expect(screen.getByText('Adicionar')).toBeInTheDocument();
    });
  });

  describe('Acessibilidade', () => {
    it('deve ter heading com n√≠vel correto', () => {
      render(<PageHeader title="T√≠tulo Acess√≠vel" />);
      
      const heading = screen.getByRole('heading', { level: 1 });
      expect(heading).toBeInTheDocument();
      expect(heading).toHaveTextContent('T√≠tulo Acess√≠vel');
    });

    it('deve manter estrutura sem√¢ntica correta', () => {
      render(
        <PageHeader 
          title="T√≠tulo Principal"
          subtitle="Subt√≠tulo descritivo"
        />
      );
      
      const heading = screen.getByRole('heading', { level: 1 });
      const subtitle = screen.getByText('Subt√≠tulo descritivo');
      
      expect(heading.tagName).toBe('H1');
      expect(subtitle.tagName).toBe('P');
    });
  });

  describe('Performance', () => {
    it('deve renderizar rapidamente', () => {
      const startTime = performance.now();
      
      render(
        <PageHeader 
          title="Performance Test"
          subtitle="Testing render performance"
          icon={<ChefHatIcon />}
          actions={<Button>Action</Button>}
        />
      );
      
      const endTime = performance.now();
      expect(endTime - startTime).toBeLessThan(50); // Menos de 50ms
    });
  });
});